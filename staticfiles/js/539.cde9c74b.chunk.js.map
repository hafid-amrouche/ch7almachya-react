{"version":3,"file":"static/js/539.cde9c74b.chunk.js","mappings":"6LAOA,MA+FA,EA/FuBA,KACnB,MAAM,SAACC,EAAQ,YAAEC,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IACpCC,EAAUC,IAAeC,EAAAA,EAAAA,UAASN,EAASI,UAC5CG,GAAcC,EAAAA,EAAAA,WACbC,EAAgBC,IAAqBJ,EAAAA,EAAAA,WAAS,GAC/CK,GAAqBH,EAAAA,EAAAA,WACpBI,EAASC,IAAcP,EAAAA,EAAAA,WAAS,GA4BnCC,EAAYO,UACXL,GACDF,EAAYO,QAAQC,UAAUC,IAAI,WAAYT,EAAYO,QAAQC,UAAUE,OAAO,WAEnFV,EAAYO,QAAQC,UAAUC,IAAI,SAAUT,EAAYO,QAAQC,UAAUE,OAAO,aAIrF,MA2BM,UAACC,IAAWhB,EAAAA,EAAAA,YAAWiB,EAAAA,GAC7B,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAYC,IAAKf,EAAYgB,UACxCC,EAAAA,EAAAA,MAAA,OAAKH,UAAU,8BAA6BE,SAAA,EAC1CC,EAAAA,EAAAA,MAAA,OAAKH,UAAU,sBAAqBE,SAAA,EAChCH,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYE,SAAEL,EAAU,oCACzCE,EAAAA,EAAAA,KAAA,YACIK,YAAaP,EAAU,YACvBQ,MAAOtB,EACPuB,SAvEaC,IAC7B,IAAIC,EAAOD,EAAME,OAAOJ,OACrBK,EAAAA,EAAAA,IAAiBF,KAClBxB,EAAYwB,GACTA,GAAQ7B,EAASI,UAAYyB,EAAKG,OAAS,EAC5CC,EAAAA,EAAMC,IAAI,gCAADC,OAAiCN,IACzCO,MAAMC,IACDA,EAASC,KAAK,IAChB5B,GAAkB,GAClBC,EAAmBG,QAAQyB,UAAY,KAEvC7B,GAAkB,GAClBC,EAAmBG,QAAQyB,UAAYrB,EAAU,0BAEnD,IACCsB,OAAMC,IACP/B,GAAkB,GAClBC,EAAmBG,QAAQyB,UAAYE,EAAMJ,SAASC,KAAKI,QAAUD,EAAME,OAAO,KAGpFjC,GAAkB,GAClBC,EAAmBG,QAAQyB,UAAU,IAGzC,EAgDgBK,UAAW,GACXvB,UAAU,uCACVwB,KAAM,KAGVzB,EAAAA,EAAAA,KAAA,SAAOE,IAAKX,QAGhBS,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBE,UACtCC,EAAAA,EAAAA,MAAA,UAAQsB,UAAWrC,GAAkBL,GAAYJ,EAASI,UAAwB,IAAZA,EAAgBiB,UAAU,mCAAmC0B,QA9CzHC,KAClBnC,GAAW,GACXoB,EAAAA,EAAMgB,KAAK,iCAEP,CAAC7C,SAASA,GACV,CACI8C,QAAU,CACR,eAAgB,sBAChBC,cAAgB,UAAYnD,EAASoD,SAI5ChB,MAAMC,IACL3B,GAAkB,GAClBG,GAAW,GACX,MAAMwC,EAAU,IACTrD,EACHI,SAAUiC,EAASC,MAEvBrC,EAAYoD,GACZC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,GAAS,IACxDb,OAAMC,IACP9B,EAAmBG,QAAQyB,UAAYE,EAAMJ,SAASC,KAAKI,OAC3DhC,GAAkB,GAClBG,GAAW,EAAM,GACjB,EAqB+JU,SAAA,CAAEL,EAAU,mBAAqBN,IAAWQ,EAAAA,EAAAA,KAACsC,EAAAA,EAAM,CAACC,KAAM,cAGrN,C","sources":["Screens/settings/ProfileScreen/UsernameUpdate.js"],"sourcesContent":["import React, { useContext, useRef, useState } from 'react'\r\nimport { UserContext } from '../../../store/UserContext'\r\nimport { isAlphaNumerical } from '../../../utils'\r\nimport axios from 'axios'\r\nimport { Loader } from '../../../Components/Loader'\r\nimport { TranslationContext } from '../../../store/TranslationContext'\r\n\r\nconst UsernameUpdate = () => {\r\n    const {userData, setUserData} = useContext(UserContext)\r\n    const [username, setUsername] = useState(userData.username)\r\n    const usernameRef = useRef()\r\n    const [isUsernameGood, setIsUsernameGood] = useState(true)\r\n    const usernameMessageRef = useRef()\r\n    const [loading, setloading] = useState(false)\r\n    const usernameChangeHandler = (event)=>{\r\n      let text = event.target.value\r\n      if(isAlphaNumerical(text)){\r\n        setUsername(text)\r\n        if(text != userData.username && text.length > 0){\r\n          axios.get(`/api/checkUsername/?username=${text}`)\r\n          .then( response =>{\r\n            if (response.data[0]) {\r\n              setIsUsernameGood(true)\r\n              usernameMessageRef.current.innerHTML = ''\r\n            }else{\r\n              setIsUsernameGood(false)\r\n              usernameMessageRef.current.innerHTML = translate('This username is taken')\r\n  \r\n            } \r\n          }).catch(error =>{\r\n            setIsUsernameGood(false)\r\n            usernameMessageRef.current.innerHTML = error.response.data.detail || error.message\r\n          })\r\n        }else{\r\n          setIsUsernameGood(true)\r\n          usernameMessageRef.current.innerHTML=''\r\n        }\r\n        \r\n      }\r\n    }\r\n\r\n    if (usernameRef.current){\r\n      if(isUsernameGood) {\r\n        usernameRef.current.classList.add('success'); usernameRef.current.classList.remove('error')\r\n      } else{\r\n        usernameRef.current.classList.add('error'); usernameRef.current.classList.remove('success')\r\n      }\r\n    }\r\n\r\n    const updateUsername =()=>{\r\n        setloading(true)\r\n        axios.post(\r\n            `/api/settings/update-username/`,\r\n            {username:username},\r\n            {\r\n                headers : {\r\n                  \"Content-Type\": \"multipart/form-data\",\r\n                  Authorization : 'Bearer ' + userData.token\r\n                }\r\n              }\r\n        )\r\n          .then( response =>{\r\n            setIsUsernameGood(true)\r\n            setloading(false)\r\n            const newData = {\r\n                ...userData,\r\n                username: response.data\r\n            }\r\n            setUserData(newData)\r\n            localStorage.setItem('userData', JSON.stringify(newData))\r\n          }).catch(error =>{\r\n            usernameMessageRef.current.innerHTML = error.response.data.detail\r\n            setIsUsernameGood(false)\r\n            setloading(false)\r\n          })\r\n    } \r\n    const {translate}=useContext(TranslationContext)\r\n    return (\r\n        <div className='p-2 w-100' ref={usernameRef} >\r\n            <div className=\"card d-flex flex-column p-3\">\r\n              <div className=\"col-12 col-sm-6 p-1\">    \r\n                  <label className='form-label'>{translate('Username (Latin letters only)')}</label>\r\n                  <textarea\r\n                      placeholder={translate('Username')}\r\n                      value={username}\r\n                      onChange={usernameChangeHandler}\r\n                      maxLength={50}\r\n                      className='form-control search-area resize-none'\r\n                      rows={1}\r\n\r\n                  />\r\n                  <label ref={usernameMessageRef}></label>\r\n                 \r\n              </div>\r\n              <div className='d-flex flex-row-reverse'>\r\n                <button disabled={!isUsernameGood || username == userData.username || username == ''} className='btn btn-success m-2 d-flex gap-2' onClick={updateUsername}>{translate('Update username')}{ loading && <Loader diam={23}/>}</button>\r\n                </div>\r\n            </div>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default UsernameUpdate"],"names":["UsernameUpdate","userData","setUserData","useContext","UserContext","username","setUsername","useState","usernameRef","useRef","isUsernameGood","setIsUsernameGood","usernameMessageRef","loading","setloading","current","classList","add","remove","translate","TranslationContext","_jsx","className","ref","children","_jsxs","placeholder","value","onChange","event","text","target","isAlphaNumerical","length","axios","get","concat","then","response","data","innerHTML","catch","error","detail","message","maxLength","rows","disabled","onClick","updateUsername","post","headers","Authorization","token","newData","localStorage","setItem","JSON","stringify","Loader","diam"],"sourceRoot":""}