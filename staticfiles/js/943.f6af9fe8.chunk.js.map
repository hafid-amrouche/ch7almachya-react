{"version":3,"file":"static/js/943.f6af9fe8.chunk.js","mappings":"uJAIA,MAkIA,EAlIaA,MACTC,EAAAA,EAAAA,YAAU,KACN,MAUMC,GAAMC,EAAAA,EAAAA,IAVW,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAIbC,GAAYC,EAAAA,EAAAA,IAAaV,GAE/B,IAAIW,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,YAC9CC,OAAOC,YAAc,KACb,uBAAwBD,QAAQA,OAAOE,mBAAmBC,YAAYP,KAAKQ,UAAU,CAAEC,KAAM,uBACjGJ,EAAAA,EAAAA,IAAYR,GAAWa,MAAK,WACxBC,QAAQC,IAAI,6BAChB,IAAGC,OAAM,SAASC,GACK,8BAAfA,EAAMC,KACVJ,QAAQC,IAAI,sDAEZD,QAAQG,MAAM,wBAAyBA,EAE3C,GAAE,EAkCN,IAAIE,EAAa,EACjB,MAAMC,EAAQA,KACO,GAAdD,GACAE,WAAWD,EAAO,KAClBD,GAAa,IAEZG,EAAAA,EAAAA,IAAStB,GAAWa,MAAMU,IACtBT,QAAQC,IAAI,aAAcb,GAAWA,EAAQsB,MAAQ,KAAM,aAAcD,GAtCvDA,KAC1B,MAAME,EAAOlB,OAAOmB,SAASC,OAAU,8BACjCC,EAAYrB,OAAOqB,UACnBC,EAAc,CAChBC,UAAYP,EACZQ,WAAaH,GAGXI,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAgB,UAADC,OAAYP,IAE/BQ,KAAMjC,KAAKQ,UAAUkB,IAEzBQ,MAAMZ,EAAKO,GACVnB,MAAKyB,IACF,IAAKA,EAASC,GACd,MAAM,IAAIC,MAAM,+BAEhB,OAAOF,EAASG,MAAM,IAEzB5B,MAAK6B,IACF5B,QAAQC,IAAI2B,EAAK,IAEpB1B,OAAMC,IACHH,QAAQG,MAAM,gDAAiDA,EAAM,GACvE,EAWM0B,CAAuBpB,GACvBrB,EAAU,CACN0C,SAAWrB,EACXsB,YAAc,IAAIC,MAEtBzC,aAAa0C,QAAQ,UAAW5C,KAAKQ,UAAUT,GAAS,IACzDc,OAAOgC,IACNlC,QAAQC,IAAIiC,GACR7B,EAAa,KACbA,GAAa,EACbE,WAAWD,EAAO,KACtB,GAER,EAGE6B,EAAsBA,KAIpB,kBAAmBC,WACnBA,UAAUC,cAAcC,SAAS,4BAA6B,CAACC,MAAQ,MACtExC,MAAMyC,IACHxC,QAAQC,IAAI,wCAAyCuC,EAAaD,OAClE,IAAIE,EAAiBA,KAAKrD,IAAWA,EAAQ2C,cAAgB,IAAIC,KAAM,IAAIA,KAAK5C,EAAQ2C,cAAgB,IAAO,MAC/G,MAAMW,EAAWC,aAAY,KACO,YAA5BC,aAAaC,YAA6BpD,OAAOqB,YACjDgC,cAAcJ,GACdjD,OAAOC,eAER+C,KAAmBnC,GAAO,GAC9B,MACAmC,KAAmBnC,GAAO,IAEhCJ,OAAOC,IACJH,QAAQG,MAAM,sCAAuCA,EAAM,GAEnE,EAKA,iBAAkBV,SAEc,YAA5BmD,aAAaC,WACbD,aAAaG,oBAAoBhD,MAAM8C,IAEhB,YAAfA,EACAV,IAGAnC,QAAQgD,KAAK,4BACjB,IAGJb,IAER,GACD,GAAG,C","sources":["Static/User.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport {initializeApp} from 'firebase/app' \r\nimport {getMessaging , deleteToken ,getToken} from 'firebase/messaging' \r\n\r\nconst User = () => {\r\n    useEffect(()=>{\r\n        const firebaseConfig = {\r\n            apiKey: \"AIzaSyB0FyjOo6-j0XK8pLcH1_NWzZqq2DDT-LM\",\r\n            authDomain: \"ch7al-machya.firebaseapp.com\",\r\n            projectId: \"ch7al-machya\",\r\n            storageBucket: \"ch7al-machya.appspot.com\",\r\n            messagingSenderId: \"1006750492863\",\r\n            appId: \"1:1006750492863:web:14de76ca115914a6c1fe0a\",\r\n            measurementId: \"G-074VKY03K5\"\r\n          };\r\n        \r\n        const app = initializeApp(firebaseConfig);\r\n        const messaging = getMessaging(app);\r\n        \r\n        let fcmData = JSON.parse(localStorage.getItem('fcmData'))\r\n        window.deleteToken = ()=>{\r\n            if ('ReactNativeWebView' in window) window.ReactNativeWebView.postMessage(JSON.stringify({ type: 'DELETE_FCM_TOKEN'}))\r\n            deleteToken(messaging).then(function() {\r\n                console.log('Token deleted successfully');\r\n            }).catch(function(error) {\r\n                if (error.code === 'messaging/token-not-found') {\r\n                console.log('Token not found; it may have already been deleted.');\r\n                } else {\r\n                console.error('Error deleting token:', error);\r\n                }\r\n            }); \r\n        }\r\n\r\n        const updateFcmTokenInServer=(currentToken)=>{\r\n            const url =  window.location.origin +  '/api/user/update-fcm-token/';\r\n            const userToken = window.userToken\r\n            const requestData = {\r\n                fcm_token : currentToken,\r\n                user_token : userToken,\r\n            };\r\n\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': \"application/json\",\r\n                    'Authorization': `Bearer ${userToken}` // Include the authorization token in the 'Authorization' header\r\n                },\r\n                body: JSON.stringify(requestData)\r\n            };\r\n            fetch(url, requestOptions)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                console.log(data);\r\n            })\r\n            .catch(error => {\r\n                console.error('There was a problem with the fetch operation:', error);\r\n            });\r\n        }\r\n\r\n        let setUpTimes = 0\r\n        const setUp = ()=>{\r\n            if(setUpTimes == 1 ){\r\n               setTimeout(setUp, 1000) \r\n               setUpTimes +=1\r\n            }else{\r\n                getToken(messaging).then((currentToken) => {\r\n                    console.log('old token:', fcmData && fcmData.token , '\\n', 'new token:', currentToken)\r\n                    updateFcmTokenInServer(currentToken)\r\n                    fcmData = {\r\n                        fcmToken : currentToken,\r\n                        lastChecked : new Date()\r\n                    }\r\n                    localStorage.setItem('fcmData', JSON.stringify(fcmData));\r\n                }).catch((err) => {\r\n                    console.log(err)\r\n                    if (setUpTimes < 10){\r\n                        setUpTimes +=1\r\n                        setTimeout(setUp, 1000)\r\n                    }\r\n                })\r\n            }    \r\n        }\r\n\r\n        const activateServiceWorker=()=>{\r\n            ///////////////////////////////////\r\n            // ACTIVATING SERVICE WORKER\r\n            //////////////////////////////////\r\n            if ('serviceWorker' in navigator) {\r\n                navigator.serviceWorker.register('/firebase-messaging-sw.js', {scope : '/'})\r\n                .then((registration) => {\r\n                    console.log('Service Worker registered with scope:', registration.scope);\r\n                    let setUpCondiction =()=> fcmData && fcmData.lastChecked ? ((new Date- new Date(fcmData.lastChecked)) / 1000 > 60 * 60 * 24) : true\r\n                    const interval = setInterval(()=>{\r\n                        if (Notification.permission !== 'granted' || !window.userToken) {\r\n                            clearInterval(interval)\r\n                            window.deleteToken()\r\n                        }\r\n                        if(setUpCondiction()) setUp()\r\n                    }, 1000 * 60 *60 )\r\n                    if(setUpCondiction()) setUp()\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Service Worker registration failed:', error);\r\n                });\r\n            }\r\n\r\n        }\r\n        \r\n        // Request permission for notifications\r\n        if ('Notification' in window) {\r\n            // Request permission to show notifications\r\n            if (Notification.permission !== 'granted') {\r\n                Notification.requestPermission().then((permission) => {\r\n                    // If the user accepts, let's create a notification\r\n                    if (permission === \"granted\") {\r\n                        activateServiceWorker()\r\n                    }\r\n                    else{\r\n                        console.warn('Permission not granted!!!')\r\n                    }\r\n                });\r\n            }else{\r\n                activateServiceWorker()\r\n            }\r\n        }\r\n    }, [])\r\n  \r\n}\r\n\r\nexport default User"],"names":["User","useEffect","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","getMessaging","fcmData","JSON","parse","localStorage","getItem","window","deleteToken","ReactNativeWebView","postMessage","stringify","type","then","console","log","catch","error","code","setUpTimes","setUp","setTimeout","getToken","currentToken","token","url","location","origin","userToken","requestData","fcm_token","user_token","requestOptions","method","headers","concat","body","fetch","response","ok","Error","json","data","updateFcmTokenInServer","fcmToken","lastChecked","Date","setItem","err","activateServiceWorker","navigator","serviceWorker","register","scope","registration","setUpCondiction","interval","setInterval","Notification","permission","clearInterval","requestPermission","warn"],"sourceRoot":""}