{"version":3,"file":"static/js/700.495d349b.chunk.js","mappings":"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","sources":["Components/UI/AutoResizeTextarea.js","Screens/Messages/ChatBox/UI/FriendMessage.js","Screens/Messages/ChatBox/UI/UserMessage.js","Screens/Messages/Messages.js","Screens/Messages/ChatBox.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst AutoResizeTextarea = ({rows, value, ...props}) => {\r\n\r\n\r\n  const calculateRows = () => {\r\n    // Count the number of lines in the textarea value\r\n    const lineCount = (value.match(/\\n/g) || []).length + 1;\r\n    // Set a minimum number_ of rows to ensure visibility\r\n    const minRows = rows;\r\n    const maxRows = 6; // Set your desired maximum number of rows\r\n\r\n    // Return a value within the specified range\r\n    return Math.min(Math.max(lineCount, minRows), maxRows);\r\n  };\r\n\r\n  return (\r\n    <textarea\r\n      rows={calculateRows()}\r\n      style={{ resize: 'none' }}\r\n      value={value}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AutoResizeTextarea;","import React, { useContext } from 'react'\r\nimport { hideUnhide, } from '../../../../utils'\r\nimport { BrowserContext } from '../../../../store/BrowserContext'\r\nimport TimeElapsed from '../../../../Components/TimeElapsed'\r\nconst FriendMessage = ({message, lastMessageId}) => {\r\n  const {togglePopup} = useContext(BrowserContext)\r\n  const {language} = useContext(BrowserContext).browserData\r\n\r\n  const buttonClickHandler=()=>{\r\n    hideUnhide(`message-time-${message.id}`, togglePopup)\r\n    if (lastMessageId == message.id) setTimeout(()=>{document.getElementById('chatbox').scrollTop = 0}, 0)\r\n  }\r\n  return (\r\n    <>\r\n        <TimeElapsed language={language} time={message.sent_at} hidden id={`message-time-${message.id}`} className='px-2 small text-grey'/>\r\n        <button onClick={buttonClickHandler} className='py-2 px-3  w-fit-content m-1 btn btn-success small text-start' style={{maxWidth: '70%',}}>{message.text}</button>\r\n    </>\r\n    \r\n  )\r\n}\r\n\r\nexport default FriendMessage","import React, { useContext } from 'react'\r\nimport { hideUnhide } from '../../../../utils'\r\nimport { BrowserContext } from '../../../../store/BrowserContext'\r\nimport TimeElapsed from '../../../../Components/TimeElapsed'\r\nimport {TranslationContext} from '../../../../store/TranslationContext'\r\n\r\nconst UserMessage = ({message, lastMessageId}) => {\r\n  const {togglePopup,Right} = useContext(BrowserContext)\r\n  const {language} = useContext(BrowserContext).browserData\r\n  const state = message.state || 'sent'\r\n\r\n  const buttonClickHandler=()=>{\r\n    hideUnhide(`message-time-${message.id}`, togglePopup)\r\n    if (lastMessageId == message.id) setTimeout(()=>{document.getElementById('chatbox').scrollTop = 0}, 0)\r\n  }\r\n  const {translate} = useContext(TranslationContext)\r\n  return (\r\n    <div className={`${ language == 'ar' ? 'd-ltr' : 'd-rtl' }`}>\r\n          <div className={`d-flex align-items-end`}>\r\n            <span className='position-relative'> \r\n              <i hidden={state == 'sent'}  className={`${state === 'notSent' ? 'fa-solid fa-triangle-exclamation text-danger' : 'fa-regular fa-paper-plane color-theme'} fa-xs`}></i>\r\n            </span>\r\n            <button onClick={buttonClickHandler} className={`py-2 px-3 w-fit-content m-1 border rounded-4 ${state === 'notSent' ? 'border-danger text-danger' : 'border-success color-theme'} small text-start`} style={{maxWidth: '70%'}}>{message.text}</button>\r\n          </div>\r\n          { message.sent_at === 'Sending' ? \r\n            <span id={`message-time-${message.id}`} hidden className='px-2 small color-theme'>{translate('Sending')}</span> : \r\n            message.sent_at === 'Not sent' ?\r\n            <span id={`message-time-${message.id}`} hidden className='px-2 small text-danger'>{translate('Not sent')}</span>:\r\n            <TimeElapsed language={language} time={message.sent_at} hidden id={`message-time-${message.id}`} className='px-2 small text-grey'/>\r\n          }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserMessage","import React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { Avatar } from '../../StyledComponents'\r\nimport AutoResizeTextarea from '../../Components/UI/AutoResizeTextarea'\r\nimport axios from 'axios'\r\nimport { Link, useLocation, useParams } from 'react-router-dom'\r\nimport { UserContext } from '../../store/UserContext'\r\nimport FriendMessage from './ChatBox/UI/FriendMessage'\r\nimport UserMessage from './ChatBox/UI/UserMessage'\r\nimport {Loader} from '../../Components/Loader'\r\nimport { BrowserContext } from '../../store/BrowserContext'\r\nimport { TranslationContext } from '../../store/TranslationContext'\r\nimport { webSocketDomain } from '../../utils'\r\n\r\nconst Messages = ({conversationsWidth}) => {\r\n    let bigScreen = window.innerWidth >= 750\r\n    /////////////////////////\r\n\r\n    const myComponentRef = useRef();\r\n    const {friendId} = useParams()\r\n    const [loadingSendMessage, setloadingSendMessage] =useState(false)\r\n    const [text, setText] = useState('')\r\n    const {userData} = useContext(UserContext)\r\n    const unsentCount = useRef(0)\r\n    const [friendData, setFriendData] = useState(null) \r\n    const sendMessage =()=>{\r\n        setloadingSendMessage(true)\r\n        setText('')\r\n        setMessages(prevState=>[{id:'toBeDeleted', text:text, sent_at : 'Sending', state: 'sending', sender : userData.id}, ...prevState])\r\n        setTimeout(()=>{document.getElementById('chatbox').scrollTop = 0}, 0)\r\n        axios.post('/api/messaging/send-message/',\r\n        {\r\n            friend_id: friendId,\r\n            text : text,\r\n        },\r\n        {\r\n            headers : {\r\n              \"Content-Type\": \"multipart/form-data\",\r\n              Authorization: `Bearer ${userData.token}`\r\n            }\r\n        }).then(response=>{\r\n            setMessages(prev=>{\r\n                prev = prev.filter(message=>message.id !='toBeDeleted')\r\n                // prev = [response.data, ...prev.filter(message => message.state !== 'sending')]\r\n                return prev\r\n            })\r\n            setloadingSendMessage(false)\r\n        }).catch(error=>{\r\n            setloadingSendMessage(false)\r\n            setMessages(prevState=>{\r\n                unsentCount.current +=1\r\n                prevState = prevState.filter(message => message.state !== 'sending')\r\n                return [{id:'NotSent' + unsentCount.current , text:text, sent_at : 'Not sent', state: 'notSent', sender : userData.id}, ...prevState]\r\n            })\r\n        })\r\n    }\r\n\r\n    /////////////////\r\n    const isNext = useRef(false)\r\n    const [messagesLoading, setMessagesLoading] = useState(true)\r\n    const [errorLoadingMessages , setErrorLoadingMessages] = useState(null)\r\n    const [messages, setMessages] = useState([])\r\n    const getMessages =(seenMessages=null)=>{\r\n        axios.post(`/api/messaging/get-messages/`,\r\n            {'seen-messages' : JSON.stringify(seenMessages == null ? messages.map(message=> Number(message.id) && message.id) : []),\r\n            'friend-id' : friendId},\r\n            {\r\n            headers : {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n                'Authorization' : `Bearer ${userData.token}`\r\n            }\r\n        })\r\n        .then((response)=>{\r\n            if (response.data[2]) setFriendData(response.data[2])\r\n            setMessagesLoading(false)\r\n            setNewMessagesLoading(false)\r\n            isNext.current = response.data[1]\r\n            setMessages(prevState=>[...prevState, ...response.data[0]])\r\n        })\r\n        .catch((error)=>{\r\n            setMessagesLoading(false)\r\n            setNewMessagesLoading(false)\r\n            setErrorLoadingMessages(error) \r\n            document.getElementById('Header').removeAttribute('hidden')\r\n        })\r\n    }\r\n    const location = useLocation()\r\n    useEffect(()=>{\r\n        setFriendData(null)\r\n        isNext.current= false\r\n        setMessagesLoading(true)\r\n        setMessages([])\r\n        getMessages([])\r\n    },[location])\r\n    const [newMessagesLoading, setNewMessagesLoading] = useState(false)\r\n    const getPrevMessages =()=>{\r\n        setNewMessagesLoading(true)\r\n        getMessages()\r\n    }\r\n\r\n    //////////////////////////\r\n    //\r\n\r\n    useEffect(() => {\r\n        if (userData.id){\r\n            try{\r\n                const socket = new WebSocket(`ws://${webSocketDomain}/chat-room/?token=${userData.token}&friend-id=${friendId}/`);\r\n                socket.onmessage = (event) => {\r\n                    const data = JSON.parse(event.data)\r\n                    if (data.type === 'message-update'){\r\n                        setMessages(prev=>[data.message, ...prev.filter(message=>message.id !='toBeDeleted')])\r\n                        setloadingSendMessage(false)\r\n                        if (document.getElementById('chatbox').scrollTop > -66 ){\r\n                            setTimeout(()=>{document.getElementById('chatbox').scrollTop =  0}, 0)\r\n                        }\r\n                    }\r\n                }\r\n                return () => {\r\n                    socket.close();\r\n                };\r\n            }catch{\r\n                console.log(`wss://${ webSocketDomain }/chat-room/?token=${userData.token}&friend-id=${friendId}` + ' Not connected')\r\n            }\r\n        }\r\n    }, [friendId])\r\n    useEffect(() => {\r\n        window.activeChatBoxFriendId = friendId\r\n        return ()=> window.activeChatBoxFriendId = null\r\n    }, [friendId])\r\n    const {Left, S, E} = useContext(BrowserContext)\r\n    const {translate} = useContext(TranslationContext)\r\n    \r\n  return (\r\n        <div className={`bg-white d-flex flex-column vh-100 flex-grow-1 z-index-1`}>\r\n            <div className={`fixed-top bg-white ms-conversation`} style={{marginInlineStart: conversationsWidth, width: window.innerWidth - conversationsWidth, maxWidth: window.innerWidth}}>\r\n                <div className={`gap-2 d-flex align-items-center my-1 p${S}-3 cursor-pointer`}>\r\n                    { !bigScreen && <Link to='/messages/' className='btn btn-outline-success border-0'><i className={`fa-solid fa-chevron-${Left}`}></i></Link>}\r\n                    <Link to={ friendData ? `/@${ friendData.friend_username }/` :'' }>\r\n                        {!friendData ?\r\n                            <>\r\n                                <img width={40} height={40} className='bg-secondary rounded rounded-circle mt-1' ></img>\r\n                                <img width={150} height={20} className='bg-secondary rounded mx-2' ></img>\r\n                            </>:\r\n                            <>\r\n                                <Avatar src={friendData.friend_image} />\r\n                                <strong>{ friendData.friend_name.text ||friendData.friend_name} {friendData.friend_name.is_verified && <img width='16' src='/static/others/verified.png'/>}</strong>\r\n                            </>\r\n                        }\r\n                    </Link>\r\n                </div>\r\n                <hr className='m-0'/>\r\n            </div>\r\n            { messagesLoading ?  \r\n                <div className='d-flex align-items-center justify-content-center vh-100'><Loader className='color-theme' diam='100'/></div>:\r\n                    <div style={{position: 'fixed', bottom: 54, height: 'calc(100% - 103px)', width: `calc( 100% - ${conversationsWidth}px)`}} >\r\n                        <div className='overflow-auto d-flex flex-column-reverse flex-grow-1 fixed-middle h-100 mw-100' style={{padding: `0 8px 8px 8px`}}  id='chatbox' ref={myComponentRef}>\r\n                                <div id='flag'/>\r\n                                {messages.map(message=>{\r\n                                    return message.sender === userData.id ? <UserMessage lastMessageId={messages[0].id} key={message.id} message={message} /> : <FriendMessage lastMessageId={messages[0].id}  key={message.id} message={message}/>\r\n                                })}\r\n                                {isNext.current &&\r\n                                    <button disabled={newMessagesLoading} className={`${newMessagesLoading ? '' : 'color-theme '} text-center p-3 h4`} onClick={getPrevMessages}>\r\n                                        {translate('Show older')}\r\n                                    </button>\r\n                                }\r\n                        </div>\r\n                    </div>\r\n            }\r\n            <div className={`d-flex gap-1 bg-white col-12 border-top fixed-bottom px-1`} style={{marginInlineStart: conversationsWidth, width: window.innerWidth - conversationsWidth, maxWidth: window.innerWidth}}>\r\n                <AutoResizeTextarea value={text} onChange={(e)=>{setText(e.target.value)}} rows='1' className='flex-grow-1 h-fit-content my-1 border rounded p-2' maxLength={255} style={{resize:'none', outline: 'none'}}></AutoResizeTextarea>\r\n                <button disabled={loadingSendMessage || !text.trim()} onClick={sendMessage} className={`btn btn-outline-success px-2 m${E}-1 rounded-1 my-1 border-0 my-2 h-fit-content align-self-end ${ Left != 'left' && 'fa-flip-horizontal' }`}><i className=\"fa-regular fa-paper-plane fa-xl\"></i></button>\r\n            </div>\r\n        </div>  \r\n  )\r\n}\r\n\r\nexport default Messages","import React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport Conversations from './Conversations'\r\nimport Messages from './Messages'\r\nimport { UserContext } from '../../store/UserContext'\r\nimport { useParams } from 'react-router-dom'\r\nimport { BrowserContext } from '../../store/BrowserContext'\r\nimport { TranslationContext } from '../../store/TranslationContext'\r\n\r\n\r\nconst ChatBox = () => {\r\n    \r\n    useEffect(()=>{\r\n        document.getElementById('Header') && document.getElementById('Header').setAttribute('hidden', '')\r\n        document.getElementById('main').style.setProperty('padding', '0')\r\n        document.getElementById('main').style.setProperty('margin-top', '0')\r\n        return ()=>{\r\n            document.getElementById('Header') && document.getElementById('Header').removeAttribute('hidden')\r\n            document.getElementById('main').style.removeProperty('padding')\r\n            document.getElementById('main').style.removeProperty('margin-top')\r\n        }\r\n    }, [])  \r\n\r\n    //////////////////////////\r\n    //\r\n    const [coponentReloader, setComponentReloder] = useState(false)\r\n    const conversationsWidth = useRef(0)\r\n    let bigScreen = window.innerWidth >= 750\r\n    window.conversationsActive = bigScreen\r\n    useEffect(()=>{\r\n        const handleResize=()=>{\r\n            if (window.innerWidth < 750) conversationsWidth.current = 0\r\n            else if (window.innerWidth > 1250) conversationsWidth.current = 500\r\n            else conversationsWidth.current = window.innerWidth * 0.4\r\n            setComponentReloder(prev=>!prev)\r\n        }\r\n        handleResize()\r\n        window.addEventListener('resize', handleResize);\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, [])\r\n    const {conversations, setConversations} = useContext(UserContext)\r\n    const {friendId} = useParams() \r\n\r\n    const {language} = useContext(BrowserContext).browserData\r\n    const {setTitle, setDescription} = useContext(BrowserContext)\r\n    const {translate}=useContext(TranslationContext)\r\n    useEffect(()=>{\r\n        setTitle(translate('ChatBox') + ` | ${translate('Ch7al Machya')}`) // Translate this\r\n        setDescription(translate('description'))\r\n    },[])\r\n    useEffect(()=>{\r\n        if (conversations){\r\n            const currentConveresation = conversations.find(conversation=> conversation.friend_id == friendId)\r\n            if (currentConveresation){\r\n                if (currentConveresation.is_seen == false){\r\n                    setConversations(prev=>{\r\n                        prev.forEach(conversation=>{\r\n                            if (conversation.friend_id == friendId) conversation.is_seen = true\r\n                            return conversation\r\n                        })\r\n                        return prev\r\n                    })\r\n                }\r\n            }\r\n            \r\n        }\r\n            \r\n    }, [conversations])\r\n    \r\n    return (\r\n        <div style={{ marginInlineStart :conversationsWidth.current}} className='d-flex'>\r\n            {bigScreen &&\r\n                <div className={`fixed-top bg-white h-100 overflow-y-auto border-${language == 'ar' ? 'start' : 'end'}`} style={{width: conversationsWidth.current}}>\r\n                    <Conversations  fetchConversations={false}/>\r\n                </div>\r\n            }\r\n            <Messages conversationsWidth={conversationsWidth.current} /> \r\n        </div>\r\n    \r\n    )\r\n}\r\nexport default ChatBox"],"names":["_ref","rows","value","props","_jsx","calculateRows","lineCount","match","length","minRows","Math","min","max","style","resize","message","lastMessageId","togglePopup","useContext","BrowserContext","language","browserData","_jsxs","_Fragment","children","TimeElapsed","time","sent_at","hidden","id","concat","className","onClick","buttonClickHandler","hideUnhide","setTimeout","document","getElementById","scrollTop","maxWidth","text","Right","state","translate","TranslationContext","conversationsWidth","bigScreen","window","innerWidth","myComponentRef","useRef","friendId","useParams","loadingSendMessage","setloadingSendMessage","useState","setText","userData","UserContext","unsentCount","friendData","setFriendData","isNext","messagesLoading","setMessagesLoading","errorLoadingMessages","setErrorLoadingMessages","messages","setMessages","getMessages","seenMessages","arguments","undefined","axios","post","JSON","stringify","map","Number","headers","token","then","response","data","setNewMessagesLoading","current","prevState","catch","error","removeAttribute","location","useLocation","useEffect","newMessagesLoading","socket","WebSocket","webSocketDomain","onmessage","event","parse","type","prev","filter","close","console","log","activeChatBoxFriendId","Left","S","E","marginInlineStart","width","Link","to","friend_username","Avatar","src","friend_image","friend_name","is_verified","height","Loader","diam","position","bottom","padding","ref","sender","UserMessage","FriendMessage","disabled","getPrevMessages","AutoResizeTextarea","onChange","e","target","maxLength","outline","trim","sendMessage","friend_id","Authorization","ChatBox","setAttribute","setProperty","removeProperty","coponentReloader","setComponentReloder","conversationsActive","handleResize","addEventListener","removeEventListener","conversations","setConversations","setTitle","setDescription","currentConveresation","find","conversation","is_seen","forEach","Conversations","fetchConversations","Messages"],"sourceRoot":""}